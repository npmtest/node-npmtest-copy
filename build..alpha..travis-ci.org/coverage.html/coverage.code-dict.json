{"/home/travis/build/npmtest/node-npmtest-copy/test.js":"/* istanbul instrument in package npmtest_copy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-copy/lib.npmtest_copy.js":"/* istanbul instrument in package npmtest_copy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_copy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_copy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-copy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-copy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_copy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_copy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_copy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_copy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_copy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_copy.__dirname + '/lib.npmtest_copy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/index.js":"'use strict';\n\nvar path = require('path');\nvar toDest = require('./lib/dest');\nvar invalid = require('./lib/invalid');\nvar utils = require('./lib/utils');\nvar base = require('./lib/base');\n\n/**\n * Copy a filepath, vinyl file, array of files, or glob of files to the\n * given destination `directory`, with `options` and callback function that\n * exposes `err` and the array of vinyl files that are created by the copy\n * operation.\n *\n * ```js\n * copy('*.js', 'dist', function(err, file) {\n *   // exposes the vinyl `file` created when the file is copied\n * });\n * ```\n * @param {String|Object|Array} `patterns` Filepath(s), vinyl file(s) or glob of files.\n * @param {String} `dir` Destination directory\n * @param {Object|Function} `options` or callback function\n * @param {Function} `cb` Callback function if no options are specified\n * @api public\n */\n\nfunction copy(patterns, dir, options, cb) {\n  if (arguments.length < 3) {\n    return invalid.apply(null, arguments);\n  }\n\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  var opts = utils.extend({cwd: process.cwd()}, options);\n  opts.cwd = path.resolve(opts.cwd);\n  patterns = utils.arrayify(patterns);\n\n  if (!utils.hasGlob(patterns)) {\n    copyEach(patterns, dir, opts, cb);\n    return;\n  }\n\n  opts.patterns = patterns;\n  if (!opts.srcBase) {\n    opts.srcBase = path.resolve(opts.cwd, utils.parent(patterns));\n  }\n\n  utils.glob(patterns, opts, function(err, files) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    copyEach(files, dir, opts, cb);\n  });\n}\n\n/**\n * Copy an array of files to the given destination `directory`, with\n * `options` and callback function that exposes `err` and the array of\n * vinyl files that are created by the copy operation.\n *\n * ```js\n * copy.each(['foo.txt', 'bar.txt', 'baz.txt'], 'dist', function(err, files) {\n *   // exposes the vinyl `files` created when the files are copied\n * });\n * ```\n * @name .copy.each\n * @param {Array} `files` Filepaths or vinyl files.\n * @param {String} `dir` Destination directory\n * @param {Object|Function} `options` or callback function\n * @param {Function} `cb` Callback function if no options are specified\n * @api public\n */\n\nfunction copyEach(files, dir, options, cb) {\n  if (arguments.length < 3) {\n    return invalid.apply(null, arguments);\n  }\n\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  var opts = utils.extend({}, options);\n  if (typeof opts.cwd === 'undefined') {\n    opts.cwd = process.cwd();\n  }\n\n  if (!opts.srcBase && opts.patterns) {\n    opts.srcBase = path.resolve(opts.cwd, utils.parent(opts.patterns));\n  }\n\n  utils.each(files, function(filename, next) {\n    var filepath = path.resolve(opts.cwd, filename);\n    copyOne(filepath, dir, opts, next);\n  }, cb);\n}\n\n/**\n * Copy a single `file` to the given `dest` directory, using\n * the specified options and callback function.\n *\n * ```js\n * copy.one('foo.txt', 'dist', function(err, file) {\n *   if (err) throw err;\n *   // exposes the vinyl `file` that is created when the file is copied\n * });\n * ```\n * @name .copy.one\n * @param {String|Object} `file` Filepath or vinyl file\n * @param {String} `dir` Destination directory\n * @param {Object|Function} `options` or callback function\n * @param {Function} `cb` Callback function if no options are specified\n * @api public\n */\n\nfunction copyOne(file, dir, options, cb) {\n  if (arguments.length < 3) {\n    return invalid.apply(null, arguments);\n  }\n\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  var opts = utils.extend({}, options);\n  if (typeof opts.cwd === 'undefined') {\n    opts.cwd = process.cwd();\n  }\n  if (typeof file === 'string') {\n    file = path.resolve(opts.cwd, file);\n  }\n\n  if (!opts.srcBase && opts.patterns) {\n    opts.srcBase = path.resolve(opts.cwd, utils.parent(opts.patterns));\n  }\n\n  toDest(dir, file, opts, function(err, out) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    base(file, out.path, opts, function(err) {\n      if (err) {\n        cb(err);\n        return;\n      }\n\n      cb(null, out);\n    });\n  });\n}\n\n/**\n * Expose `copy`\n */\n\nmodule.exports = copy;\nmodule.exports.one = copyOne;\nmodule.exports.each = copyEach;\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/lib/dest.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\n\nmodule.exports = function toDest(dir, file, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  var opts = utils.extend({overwrite: true}, options);\n  opts.cwd = path.resolve(utils.resolve(opts.cwd || '.'));\n  if (typeof file === 'string') {\n    file = utils.toFile(file, opts);\n  }\n\n  var destDir;\n  if (typeof dir === 'function') {\n    destDir = dir(file);\n\n  } else if (typeof dir === 'string') {\n    destDir = dir;\n\n  } else {\n    return cb(new TypeError('expected dest to be a string or function.'));\n  }\n\n  if (opts.srcBase) {\n    file.base = path.resolve(file.cwd, opts.srcBase);\n    file.path = path.resolve(file.base, file.relative);\n  }\n\n  if (opts.destBase) {\n    destDir = path.resolve(opts.destBase, destDir);\n  } else if (utils.isAbsolute(destDir)) {\n    destDir = path.resolve(opts.cwd, path.resolve(destDir));\n  } else {\n    destDir = path.join(opts.cwd, destDir);\n  }\n\n  // update file path with destination directory\n  if (opts.flatten === true || typeof file.path === 'undefined') {\n    file.path = path.join(destDir, file.basename);\n  } else {\n    file.path = path.resolve(destDir, file.relative);\n  }\n\n  // update file extension\n  if (typeof opts.ext === 'string') {\n    if (opts.ext !== '' && opts.ext.charAt(0) !== '.') {\n      opts.ext = '.' + opts.ext;\n    }\n    file.extname = opts.ext;\n  }\n\n  file.dest = file.path;\n  cb(null, file);\n};\n\nfunction isRelative(dest) {\n  return path.relative(process.cwd(), path.resolve(dest)) === dest;\n}\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/lib/utils.js":"'use strict';\n\n/**\n * Module dependencies\n */\n\nvar fs = require('fs');\nvar utils = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils;\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('async-each', 'each');\nrequire('bluebird', 'Promise');\nrequire('extend-shallow', 'extend');\nrequire('file-contents', 'contents');\nrequire('glob-parent');\nrequire('graceful-fs', 'fs');\nrequire('has-glob');\nrequire('is-absolute');\nrequire('matched', 'glob');\nrequire('mkdirp');\nrequire('resolve-dir', 'resolve');\nrequire('to-file');\nrequire = fn;\n\nutils.stat = function(file) {\n  try {\n    return fs.lstatSync(file.path);\n  } catch (err) {}\n  return {};\n};\n\n/**\n * Get the base filepath from a glob.\n *\n * @param {Array|String} `patterns`\n * @return {String}\n */\n\nutils.parent = function(patterns) {\n  if (Array.isArray(patterns)) {\n    return utils.globParent(patterns[0]);\n  }\n  return utils.globParent(patterns);\n};\n\n/**\n * Cast `val` to an array.\n *\n * @param {any} val\n * @return {Array}\n */\n\nutils.arrayify = function(val) {\n  return val ? (Array.isArray(val) ? val : [val]) : [];\n};\n\n/**\n * Expose `utils` modules\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/lib/invalid.js":"'use strict';\n\n/**\n * Handle errors for invalid arguments\n *\n * @param {String} `src`\n * @param {String} `dest`\n * @param {Object} `options`\n * @param {Function} `cb` (if async)\n */\n\nfunction invalidArgs(src, dest, options, cb) {\n  // get the callback so we can give the correct errors\n  // when src or dest is missing\n  if (typeof dest === 'function') cb = dest;\n  if (typeof src === 'function') cb = src;\n  if (typeof cb !== 'function') {\n    throw new TypeError('expected callback to be a function');\n  }\n  if (typeof src !== 'string') {\n    return cb(new TypeError('expected \"src\" to be a string'));\n  }\n  if (typeof dest !== 'string') {\n    return cb(new TypeError('expected \"dest\" to be a string'));\n  }\n}\n\nmodule.exports = invalidArgs;\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/lib/base.js":"'use strict';\n\nvar path = require('path');\nvar invalid = require('./invalid');\nvar utils = require('./utils');\nvar once = require('./once');\n\n/**\n * Copy a file from `src` to `dest`\n *\n * @param {String} `src` Source filepath\n * @param {String} `dest` Destination filepath\n * @param {Object} `options`\n * @param {Function} `cb` Callback function\n * @api public\n */\n\nfunction copyBase(src, dest, options, callback) {\n  if (typeof options !== 'object') {\n    callback = options;\n    options = {};\n  }\n\n  if (arguments.length < 3) {\n    return invalid.apply(null, arguments);\n  }\n\n  var fs = utils.fs; // graceful-fs (lazyily required)\n  var opts = utils.extend({overwrite: true}, options);\n  var cb = once(callback);\n  var listener = once(ws);\n  src = path.resolve(src);\n\n  var rs = fs.createReadStream(src)\n    .on('error', handleError('read', src, opts, cb))\n    .on('readable', listener)\n    .on('end', listener);\n\n  function ws() {\n    mkdir(dest, function(err) {\n      if (err) return cb(err);\n      rs.pipe(fs.createWriteStream(dest, writeOpts(opts))\n        .on('error', handleError('write', dest, opts, cb))\n        .on('close', handleClose(src, dest, cb)));\n    });\n  }\n}\n\n/**\n * Normalize write options\n *\n * @param {Object} `opts`\n * @return {Object}\n */\n\nfunction writeOpts(opts) {\n  return utils.extend({\n    flags: opts.flags || (opts.overwrite ? 'w' : 'wx')\n  }, opts);\n}\n\n/**\n * Ensure that a directory exists before trying to write to it.\n *\n * @param {String} `dest`\n * @param {Function} `cb` Callback function\n */\n\nfunction mkdir(dest, cb) {\n  var dir = path.dirname(path.resolve(dest));\n  utils.mkdirp(dir, function(err) {\n    if (err && err.code !== 'EEXIST') {\n      err.message = formatError('mkdirp cannot create directory', dir, err);\n      return cb(new Error(err));\n    }\n    cb();\n  });\n}\n\n/**\n * Format error messages\n *\n * @param {String} `msg` Custom error message\n * @param {String} `filepath` filepath that caused the error\n * @param {Object} `err` Error object\n * @return {String}\n */\n\nfunction formatError(msg, filepath, err) {\n  return '[copy base] ' + msg + ' > \"' + filepath + '\": ' + err.message;\n}\n\n/**\n * Handle errors with custom message formatting.\n *\n * @param {String} `type` types are \"read\" or \"write\"\n * @param {String} `filepath` filepath that caused the error\n * @param {Object} `options`\n * @param {Function} `cb` callback function\n */\n\nfunction handleError(type, filepath, opts, cb) {\n  return function(err) {\n    switch (type) {\n      case 'read':\n        if (err.code === 'ENOENT') {\n          err.message = formatError('file does not exist', filepath, err);\n        } else {\n          err.message = formatError('cannot read file', filepath, err);\n        }\n        break;\n      case 'write':\n        if (!opts.overwrite && err.code === 'EEXIST') {\n          return cb();\n        }\n        err.message = formatError('cannot write to', filepath, err);\n        break;\n    }\n    cb(err);\n  };\n}\n\n/**\n * Handle write close event.\n *\n * @param {String} `src` Source filepath\n * @param {String} `dest` Destination filepath\n * @param {Function} `cb` Callback function\n */\n\nfunction handleClose(src, dest, cb) {\n  var fs = utils.fs; // graceful-fs (lazyily required)\n  return function() {\n    fs.lstat(src, function(err, stat) {\n      if (err) return cb(err);\n\n      fs.utimes(dest, stat.atime, stat.mtime, function(err) {\n        if (err) return cb(err);\n        cb();\n      });\n    });\n  };\n}\n\n/**\n * Expose `copyBase`\n */\n\nmodule.exports = copyBase;\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/lib/once.js":"'use strict';\n\n/**\n * Ensure that the given function is only called once.\n * @param {Function} fn\n */\n\nmodule.exports = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('expected fn to be a function');\n  }\n  var result;\n  return function() {\n    if (!fn.called) {\n      fn.called = true;\n      result = fn.apply(this, arguments);\n    }\n    return result;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/bin/cli.js":"#!/usr/bin/env node\n\nvar copy = require('..');\nvar log = require('log-ok');\nvar argv = process.argv.slice(2);\nvar dir = argv.pop();\nvar patterns = argv;\n\nif (!patterns || !dir) {\n  console.log('Usage: copy <patterns> <dir>');\n} else {\n  copy(patterns, dir, function(err, files) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n\n    files.forEach(function(file) {\n      log(file.relative);\n    });\n    process.exit(0);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-copy/node_modules/copy/lib/recurse.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\n\n/**\n * async\n */\n\nfunction recurse(cwd, callback) {\n  var arr = [];\n\n  function lookup(dir, cb) {\n    var file = { path: dir, cwd: dir };\n\n    utils.contents.async(file, function(err, res) {\n      if (err) {\n        cb(err);\n        return;\n      }\n\n      arr.push(res);\n\n      if (res.stat === null) {\n        // temporary. errors are currently silenced in file-stat,\n        // once that's updated we'll remove this\n        try {\n          utils.fs.readdirSync(res.path);\n        } catch (err) {\n          cb(err);\n          return;\n        }\n      } else if (res.stat && res.stat.isDirectory()) {\n        utils.fs.readdir(res.path, function(err, files) {\n          if (err) {\n            cb(err);\n            return;\n          }\n\n          res.files = files;\n          utils.each(files, function(filename, next) {\n            lookup(path.join(dir, filename), next);\n          }, cb);\n        });\n      } else {\n        cb();\n      }\n    });\n  }\n\n  lookup(cwd, function(err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    callback(null, arr);\n  });\n}\n\n/**\n * sync\n */\n\nrecurse.sync = function(cwd) {\n  var files = [];\n\n  function lookup(dir) {\n    var file = { path: dir, cwd: dir };\n\n    utils.contents.sync(file);\n    files.push(file);\n\n    if (file.stat && file.stat.isDirectory()) {\n      file.files = utils.fs.readdirSync(file.path);\n      for (var i = 0; i < file.files.length; i++) {\n        lookup(path.join(dir, file.files[i]));\n      }\n    }\n  }\n  lookup(cwd);\n  return files;\n};\n\n/**\n * promise\n */\n\nrecurse.promise = function(dir, files) {\n  files = files || [];\n\n  var readdir = utils.Promise.promisify(utils.fs.readdir);\n  return readdir(dir)\n    .reduce(function(acc, filename) {\n      var filepath = path.join(dir, filename);\n      var file = { path: filepath, cwd: dir};\n      utils.contents.sync(file);\n\n      if (file.stat && file.stat.isDirectory()) {\n        return recurse.promise(file.path, acc);\n      }\n      return acc.concat(file);\n    }, files);\n};\n\n/**\n * Expose `recurse`\n */\n\nmodule.exports = recurse;\n"}